import pandas as pd
import matplotlib.pyplot as plt
import os

# Configuraci√≥n de directorios
output_dir = "graficos_indicadores"
os.makedirs(output_dir, exist_ok=True)

# Eliminar im√°genes existentes en la carpeta
for archivo in os.listdir(output_dir):
    ruta_archivo = os.path.join(output_dir, archivo)
    if os.path.isfile(ruta_archivo):
        os.remove(ruta_archivo)

# Nombre del archivo
archivo_excel = "DB_compensacion_py.xlsx"

# Verificar si el archivo existe
if not os.path.exists(archivo_excel):
    print(f"El archivo '{archivo_excel}' no existe. Aseg√∫rate de generar el dataset primero.")
    exit()

# Cargar el dataset
df = pd.read_excel(archivo_excel)

# Convertir fechas
df["Fecha Ingreso"] = pd.to_datetime(df["Fecha Ingreso"])
df["A√±o Ingreso"] = df["Fecha Ingreso"].dt.year

# Funci√≥n para guardar gr√°ficos
def guardar_grafico(fig, nombre):
    ruta = os.path.join(output_dir, nombre)
    fig.savefig(ruta)
    print(f"üìä Gr√°fico guardado: {ruta}")

### **Indicadores Clave**

# 1Ô∏è‚É£ Total de empleados
total_empleados = df.shape[0]
print(f"Total de empleados: {total_empleados}")

# 2Ô∏è‚É£ Distribuci√≥n de g√©nero
genero_counts = df["G√©nero"].value_counts()
fig, ax = plt.subplots()
ax.pie(genero_counts, labels=genero_counts.index, autopct="%.1f%%", colors=["blue", "pink"], startangle=90)
ax.set_title("Distribuci√≥n de G√©nero")
guardar_grafico(fig, "distribucion_genero.png")

# 1Ô∏è‚É£ Costo laboral por √°rea
costo_laboral_area = df.groupby("√Årea")["Salario"].sum().sort_values(ascending=False)
fig, ax = plt.subplots()
costo_laboral_area.plot(kind="bar", ax=ax, color='skyblue')
ax.set_title("Costo Laboral por √Årea")
ax.set_ylabel("Salario Total ($)")
ax.set_xlabel("√Årea")
plt.xticks(rotation=45)
guardar_grafico(fig, "costo_laboral_area.png")

# 2Ô∏è‚É£ Distribuci√≥n salarial por g√©nero
salario_genero = df.groupby("G√©nero")["Salario"].describe()
fig, ax = plt.subplots()
salario_genero["mean"].plot(kind="bar", ax=ax, color=['pink', 'blue'])
ax.set_title("Distribuci√≥n Salarial por G√©nero")
ax.set_ylabel("Salario Promedio ($)")
guardar_grafico(fig, "salario_genero.png")

# 3Ô∏è‚É£ Rotaci√≥n salarial
rotacion_salarial = df.groupby("Estado")["Salario"].mean()
fig, ax = plt.subplots()
rotacion_salarial.plot(kind="bar", ax=ax, color=['green', 'red'])
ax.set_title("Rotaci√≥n Salarial")
ax.set_ylabel("Salario Promedio ($)")
guardar_grafico(fig, "rotacion_salarial.png")

# 4Ô∏è‚É£ Indicador de crecimiento
empleados_ultimos_5_anios = df[df["A√±o Ingreso"] >= (df["A√±o Ingreso"].max() - 5)].shape[0]
total_empleados = df.shape[0]
indicador_crecimiento = empleados_ultimos_5_anios / total_empleados * 100

fig, ax = plt.subplots()
ax.pie([indicador_crecimiento, 100 - indicador_crecimiento], labels=["√öltimos 5 a√±os", "Anteriores"], autopct="%.1f%%", colors=["blue", "gray"])
ax.set_title("Indicador de Crecimiento")
guardar_grafico(fig, "indicador_crecimiento.png")

### **Indicadores Calculados**

# 5Ô∏è‚É£ Promedio de salario por cargo
salario_por_cargo = df.groupby("Cargo")["Salario"].mean().sort_values()
fig, ax = plt.subplots()
salario_por_cargo.plot(kind="barh", ax=ax, color='purple')
ax.set_title("Salario Promedio por Cargo")
ax.set_xlabel("Salario Promedio ($)")
guardar_grafico(fig, "salario_por_cargo.png")

# 6Ô∏è‚É£ Distribuci√≥n de salario en las √°reas
distribucion_salario_area = df.groupby("√Årea")["Salario"].describe()

# 7Ô∏è‚É£ An√°lisis de equidad interna
equidad_interna = df.groupby(["√Årea", "Cargo"])["Salario"].mean()

# 8Ô∏è‚É£ Equidad salarial entre hombres y mujeres
brecha_salarial = df.groupby("G√©nero")["Salario"].mean()

fig, ax = plt.subplots()
colors = ['blue', 'pink']
brecha_salarial.plot(kind="bar", ax=ax, color=colors)

# Anotaciones para mostrar los valores exactos
for i, salario in enumerate(brecha_salarial):
    ax.text(i, salario + (salario * 0.02), f"${salario:,.0f}", ha='center', fontsize=10, fontweight="bold")

# Diferencia salarial
diff = brecha_salarial.max() - brecha_salarial.min()
ax.annotate(f"Diferencia: ${diff:,.0f}", 
            xy=(0.5, brecha_salarial.max()), 
            xytext=(0.5, brecha_salarial.max() + (brecha_salarial.max() * 0.05)), 
            arrowprops=dict(facecolor='red', arrowstyle="->"),
            ha='center', fontsize=10, fontweight="bold", color='red')

ax.set_title("Brecha Salarial entre G√©neros")
ax.set_ylabel("Salario Promedio ($)")

guardar_grafico(fig, "brecha_salarial.png")


### **Indicadores Sugeridos**

# 9Ô∏è‚É£ Nivel educativo por g√©nero
nivel_educativo_genero = df.groupby(["G√©nero", "Nivel Educativo"]).size().unstack()
fig, ax = plt.subplots()
nivel_educativo_genero.plot(kind="bar", ax=ax)
ax.set_title("Nivel Educativo por G√©nero")
ax.set_ylabel("Cantidad de Empleados")
guardar_grafico(fig, "nivel_educativo_genero.png")

# üîü Relaci√≥n entre edad y salario
relacion_edad_salario = df.groupby("Edad")["Salario"].mean()
fig, ax = plt.subplots()
ax.scatter(relacion_edad_salario.index, relacion_edad_salario.values, color='orange')
ax.set_title("Relaci√≥n entre Edad y Salario")
ax.set_xlabel("Edad")
ax.set_ylabel("Salario Promedio ($)")
guardar_grafico(fig, "relacion_edad_salario.png")

# 1Ô∏è‚É£1Ô∏è‚É£ Tipos de contrato con a√±os de experiencia
contrato_experiencia = df.groupby("Tipo de Contrato")["A√±os de Experiencia"].mean()
fig, ax = plt.subplots()
contrato_experiencia.plot(kind="bar", ax=ax, color='brown')
ax.set_title("A√±os de Experiencia por Tipo de Contrato")
ax.set_ylabel("Experiencia Promedio (a√±os)")
guardar_grafico(fig, "contrato_experiencia.png")

# 1Ô∏è‚É£2Ô∏è‚É£ Distribuci√≥n de empleados por fondo
empleados_por_fondo = df["Fondo de Pensi√≥n"].value_counts()
fig, ax = plt.subplots()
empleados_por_fondo.plot(kind="bar", ax=ax, color='gray')
ax.set_title("Distribuci√≥n de Empleados por Fondo Pensiones")
ax.set_ylabel("Edad")
guardar_grafico(fig, "empleados_por_fondo.png")

print("‚úÖ An√°lisis completado y gr√°ficos generados en la carpeta 'graficos_indicadores'.")
